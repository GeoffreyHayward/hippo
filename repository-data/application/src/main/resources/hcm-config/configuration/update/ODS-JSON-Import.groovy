import org.apache.commons.vfs2.FileObject
import org.hippoecm.frontend.editor.plugins.resource.ResourceHelper
import org.hippoecm.repository.api.WorkflowManager
import org.hippoecm.repository.impl.PropertyDecorator
import org.hippoecm.repository.util.JcrUtils
import org.hippoecm.repository.util.NodeIterable
import org.onehippo.forge.content.exim.core.DocumentManager
import org.onehippo.forge.content.exim.core.impl.WorkflowDocumentVariantImportTask
import org.onehippo.repository.update.BaseNodeUpdateVisitor
import org.onehippo.repository.util.JcrConstants

import javax.jcr.*
import javax.jcr.query.Query
import javax.jcr.query.QueryManager
import javax.jcr.query.QueryResult
import java.text.SimpleDateFormat

/**
 * This script consumes content generated by
 * <a href="https://github.com/NHS-digital-website/indicators-hippo-migrator">Indicators Migrator</a>.
 *
 */
class ODSImporterScript extends BaseNodeUpdateVisitor {
    private static final String PROPERTY_LAST_MODIFIED = "jcr:lastModified";
    private Session session
    private QueryManager manager
    private boolean createFile = true;
    private boolean doneFile = false;

    void initialize(Session session) {
        this.session = session
        manager = session.getWorkspace().getQueryManager();
    }

    private void loadFile(byte[] strbytes) {
        if (createFile) {
            log.debug("Saving File")
            InputStream stream = new ByteArrayInputStream(strbytes)
            def result = manager.createQuery("/jcr:root/content/assets", Query.XPATH).execute()
            Node node = result.getNodes().nextNode();
            JcrUtils.ensureIsCheckedOut(node)
            SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd_HH_mm_ss");
            Node folder = node.addNode("ODS_Data_" + format1.format(Calendar.getInstance().getTime()) + ".json", "externalstorage:resource")
            folder.setProperty(JcrConstants.JCR_DATA, ResourceHelper.getValueFactory(node).createBinary(stream));
            folder.setProperty(PROPERTY_LAST_MODIFIED, Calendar.getInstance())
            folder.setProperty("jcr:mimeType", "text/json")
            folder.getSession().save()
        }
    }

    @Override
    boolean doUpdate(Node node) throws RepositoryException {
        log.debug("Saving File " + node.getPath())
        PropertyIterator iter1 = node.getProperties()
        while (iter1.hasNext() && !doneFile) {
            PropertyDecorator pd = iter1.nextProperty();
            if ("jcr:data".equalsIgnoreCase(pd.getName())) {
                log.debug("Updating pattern for node " + pd.getName())
                byte[] str = pd.getValue().getString().getBytes()
                loadFile(str)
                doneFile = true;
            }
        }
        return false
    }

    boolean undoUpdate(Node node) {
        throw new UnsupportedOperationException('Updater does not implement undoUpdate method')
    }

}